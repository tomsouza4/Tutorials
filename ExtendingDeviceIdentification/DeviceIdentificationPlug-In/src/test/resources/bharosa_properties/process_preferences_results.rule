<!-- This rule file is customized for desert challenge runtime -->
<rule name="RegistrationRequired" no-loop="true" salience="100">
	<parameter identifier="actionList">
		<class>java.util.List</class>
	</parameter>

	<java:condition>actionList.contains("RegistrationRequired")</java:condition>

	<java:consequence>
		if (logger != null){
		logger.debug("Executing RegistrationRequired condition");
		}

		finalAction.append("RegistrationRequired");
		drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
	</java:consequence>
</rule>

<rule name="Password" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("Password")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing Password condition");
        }

        finalAction.append("Password");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordHTML" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordHTML")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordHTML condition");
        }

        finalAction.append("PasswordHTML");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordTextPad" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordTextPad")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordTextPad condition");
        }

        finalAction.append("PasswordTextPad");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordTextPadGeneric" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordTextPadGeneric")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordTextPadGeneric condition");
        }

        finalAction.append("PasswordTextPadGeneric");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordTextPadFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordTextPadFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordTextPadFirstTime condition");
        }

        finalAction.append("PasswordTextPadFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordTextPadGenericFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordTextPadGenericFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordTextPadGenericFirstTime condition");
        }

        finalAction.append("PasswordTextPadGenericFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordPinPad" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordPinPad")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordPinPad condition");
        }

        finalAction.append("PasswordPinPad");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordPinPadGeneric" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordPinPadGeneric")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordPinPadGeneric condition");
        }

        finalAction.append("PasswordPinPadGeneric");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordPinPadFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordPinPadFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordPinPadFirstTime condition");
        }

        finalAction.append("PasswordPinPadFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordPinPadGenericFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordPinPadGenericFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordPinPadGenericFirstTime condition");
        }

        finalAction.append("PasswordPinPadGenericFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadFull" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadFull")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadFull condition");
        }

        finalAction.append("PasswordKeypadFull");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadFullGeneric" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadFullGeneric")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadFullGeneric condition");
        }

        finalAction.append("PasswordKeypadFullGeneric");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadFullFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadFullFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadFullFirstTime condition");
        }

        finalAction.append("PasswordKeypadFullFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadFullGenericFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadFullGenericFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadFullGenericFirstTime condition");
        }

        finalAction.append("PasswordKeypadFullGenericFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadAlpha" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadAlpha")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadAlpha condition");
        }

        finalAction.append("PasswordKeypadAlpha");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadAlphaGeneric" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadAlphaGeneric")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadAlphaGeneric condition");
        }

        finalAction.append("PasswordKeypadAlphaGeneric");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadAlphaFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadAlphaFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadAlphaFirstTime condition");
        }

        finalAction.append("PasswordKeypadAlphaFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadAlphaGenericFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadAlphaGenericFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadAlphaGenericFirstTime condition");
        }

        finalAction.append("PasswordKeypadAlphaGenericFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadAlphaTurk" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadAlphaTurk")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadAlphaTurk condition");
        }

        finalAction.append("PasswordKeypadAlphaTurk");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadAlphaTurkGeneric" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadAlphaTurkGeneric")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadAlphaTurkGeneric condition");
        }

        finalAction.append("PasswordKeypadAlphaTurkGeneric");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadAlphaTurkFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadAlphaTurkFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadAlphaTurkFirstTime condition");
        }

        finalAction.append("PasswordKeypadAlphaTurkFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordKeypadAlphaTurkGenericFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordKeypadAlphaTurkGenericFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordKeypadAlphaTurkGenericFirstTime condition");
        }

        finalAction.append("PasswordKeypadAlphaTurkGenericFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordSlider" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordSlider")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordSlider condition");
        }

        finalAction.append("PasswordSlider");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>
<rule name="PasswordSliderFirstTime" no-loop="true" salience="100">
    <parameter identifier="actionList">
        <class>java.util.List</class>
    </parameter>

    <java:condition>actionList.contains("PasswordSliderFirstTime")</java:condition>

    <java:consequence>
        if (logger != null){
        logger.debug("Executing PasswordSliderFirstTime condition");
        }

        finalAction.append("PasswordSliderFirstTime");
        drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
    </java:consequence>
</rule>

<rule name="Default No Result" no-loop="true" salience="10">
	<parameter identifier="actionList">
		<class>java.util.List</class>
	</parameter>

	<java:condition>true</java:condition>

	<java:consequence>
		if (logger != null){
		logger.debug("No rules result, so lets allow the user ");
		}

		finalAction.append("Allow");
		drools.clearAgenda();  <!-- This stops any other rules from being evaluated -->
	</java:consequence>
</rule>
